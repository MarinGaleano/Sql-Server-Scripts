--se algum dia precisarem de um script para aplicar permissÃ£o em lote.


cls

# Configuration
$centralServer = "ppolwmerx00013\PRD"
$centralDatabase = "AG_Test"
$queryServidores = "

   -- Compare names that exist in both tables
SELECT DISTINCT
      [FullName] as ServerName,
      CleanName
FROM (
    SELECT 
        CASE 
            WHEN CHARINDEX('\', [Server_Name]) > 0 
                THEN LEFT([Server_Name], CHARINDEX('\', [Server_Name]) - 1)
            ELSE [Server_Name]
        END AS CleanName,
        [Server_Name],
        [Port],
        [FullName]
    FROM [Merlin_II].[avb].[Servers_Report]
) AS A
INNER JOIN [AG_Test].[dbo].[SQLServers] AS B
    ON A.CleanName = B.SQLServer_Name AND [status] = 'USGCI';
"

# Domain login (Windows Authentication)
$login = "GSM1900\svc_prd_dss"

# Enable or disable simulation mode
$ModoSimulacao = $false  # Set to $false to execute for real

# Get list of servers
$servidores = Invoke-Sqlcmd -ServerInstance $centralServer -Database $centralDatabase -Query $queryServidores

foreach ($row in $servidores) {
    $servidor = $row.ServerName
    $nomelimpo = $row.CleanName
    Write-Host "`nConnecting to $servidor ..." -ForegroundColor Cyan

    try {
        # Script to create login
        $scriptLogin = @"
IF NOT EXISTS (SELECT 1 FROM sys.server_principals WHERE name = N'$login')
BEGIN
    CREATE LOGIN [$login] FROM WINDOWS;
END
"@

        # Script to create the user in each database
        $scriptUsuarios = @"

if exists(select is_local, role_desc from sys.dm_hadr_availability_replica_states where role = 1 and role_desc = 'PRIMARY') 
begin
    DECLARE @DatabaseName NVARCHAR(255);
    DECLARE @SQL NVARCHAR(MAX);

    DECLARE db_cursor CURSOR FOR
    SELECT name 
    FROM sys.databases 
    WHERE state_desc = 'ONLINE'
      AND name NOT IN ('master', 'tempdb', 'model', 'msdb');

    OPEN db_cursor;
    FETCH NEXT FROM db_cursor INTO @DatabaseName;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @SQL = '
        USE [' + @DatabaseName + '];
        IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N''$login'')
        BEGIN
            CREATE USER [$login] FOR LOGIN [$login];
        END
        EXEC sp_addrolemember N''db_datareader'', N''$login'';';
    
        EXEC sp_executesql @SQL;
        FETCH NEXT FROM db_cursor INTO @DatabaseName;
    END

    CLOSE db_cursor;
    DEALLOCATE db_cursor;
end 
else 
begin 
    -- Node is not primary; run only on databases not part of Availability Group
    DECLARE @DatabaseName2 NVARCHAR(255);
    DECLARE @SQL2 NVARCHAR(MAX);

    DECLARE db_cursor CURSOR FOR
    SELECT name AS DatabaseName
    FROM sys.databases
    WHERE name NOT IN (
        SELECT database_name
        FROM sys.availability_databases_cluster
    )
    AND state_desc = 'ONLINE'
    AND database_id > 4;  -- excludes system databases

    OPEN db_cursor;
    FETCH NEXT FROM db_cursor INTO @DatabaseName2;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @DatabaseName2 = '
        USE [' + @DatabaseName2 + '];
        IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N''$login'')
        BEGIN
            CREATE USER [$login] FOR LOGIN [$login];
        END
        EXEC sp_addrolemember N''db_datareader'', N''$login'';';
    
        EXEC sp_executesql @SQL2;
        FETCH NEXT FROM db_cursor INTO @DatabaseName2;
    END

    CLOSE db_cursor;
    DEALLOCATE db_cursor;
end 
"@

        $queryatualizastatus = "UPDATE [AG_Test].[dbo].[SQLServers] SET [status] = 'ok' WHERE [SQLServer_Name] = '$nomelimpo'"

        if ($ModoSimulacao) {
            Write-Host "[SIMULATION] Command for $servidor:" -ForegroundColor Yellow
            Write-Host $scriptLogin -ForegroundColor Gray
            Write-Host $scriptUsuarios -ForegroundColor Gray
            # Invoke-Sqlcmd -ServerInstance $centralServer -Database $centralDatabase -Query $queryatualizastatus
        } else {

            $erroLogin = $false
            $erroUsuario = $false

            try {
                Invoke-Sqlcmd -ServerInstance $servidor -Query $scriptLogin -ErrorAction Stop
            }
            catch {
                Write-Host "Error creating login on $servidor: $_" -ForegroundColor Red
                $erroLogin = $true
            }

            try {
                Invoke-Sqlcmd -ServerInstance $servidor -Query $scriptUsuarios -ErrorAction Stop
            }
            catch {
                Write-Host "Error creating users on databases in $servidor: $_" -ForegroundColor Red
                $erroUsuario = $true
            }

            if (-not $erroLogin -and -not $erroUsuario) {
                Write-Host "User successfully added on: $servidor" -ForegroundColor Green
                Invoke-Sqlcmd -ServerInstance $centralServer -Database $centralDatabase -Query $queryatualizastatus
            }
        }
    }
    catch {
        Write-Host "Unexpected error on $servidor: $_" -ForegroundColor Red
    }
}
